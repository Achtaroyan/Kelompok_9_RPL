import React, { useState } from "react";
import { Book } from "@/entities/all";
import { motion } from "framer-motion";
import { BookOpen, Upload, Save, ArrowLeft } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";

import BookFormBasic from "../components/addbook/BookFormBasic";
import BookFormDetails from "../components/addbook/BookFormDetails";
import BookFormCover from "../components/addbook/BookFormCover";
import FormProgress from "../components/addbook/FormProgress";

export default function AddBookPage() {
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState(1);
  const [isLoading, setIsLoading] = useState(false);
  const [bookData, setBookData] = useState({
    title: "",
    author: "",
    description: "",
    topic: "fiksi",
    publisher: "",
    isbn: "",
    published_year: new Date().getFullYear(),
    pages: 0,
    price: 0,
    language: "bahasa_indonesia",
    condition: "baru",
    stock: 1,
    cover_url: "",
    rating: 0
  });

  const updateBookData = (field, value) => {
    setBookData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const nextStep = () => {
    if (currentStep < 3) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleSubmit = async () => {
    setIsLoading(true);
    try {
      await Book.create(bookData);
      navigate(createPageUrl("Books"));
    } catch (error) {
      console.error("Error creating book:", error);
    }
    setIsLoading(false);
  };

  const isStepValid = () => {
    switch (currentStep) {
      case 1:
        return bookData.title && bookData.author && bookData.description && bookData.topic;
      case 2:
        return bookData.publisher && bookData.price > 0;
      case 3:
        return true; // Cover is optional
      default:
        return false;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-100 p-4 md:p-8">
      <div className="max-w-4xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="mb-8"
        >
          <div className="flex items-center gap-4 mb-6">
            <Button
              variant="outline"
              size="icon"
              onClick={() => navigate(createPageUrl("Books"))}
              className="hover:bg-blue-50"
            >
              <ArrowLeft className="w-5 h-5" />
            </Button>
            <div className="flex items-center gap-4">
              <div className="w-12 h-12 bg-gradient-to-r from-emerald-500 to-teal-600 rounded-xl flex items-center justify-center shadow-lg">
                <BookOpen className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-emerald-600 to-teal-600 bg-clip-text text-transparent">
                  Tambah Buku Baru
                </h1>
                <p className="text-gray-600 mt-1">Lengkapi informasi buku untuk menambahkan ke koleksi</p>
              </div>
            </div>
          </div>

          <FormProgress currentStep={currentStep} totalSteps={3} />
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          <Card className="bg-white/80 backdrop-blur-sm shadow-xl border-blue-100">
            <CardHeader className="bg-gradient-to-r from-blue-500/5 to-indigo-500/5 border-b border-blue-100">
              <CardTitle className="flex items-center gap-3">
                {currentStep === 1 && (
                  <>
                    <BookOpen className="w-6 h-6 text-blue-600" />
                    Informasi Dasar Buku
                  </>
                )}
                {currentStep === 2 && (
                  <>
                    <Upload className="w-6 h-6 text-emerald-600" />
                    Detail & Penerbitan
                  </>
                )}
                {currentStep === 3 && (
                  <>
                    <Save className="w-6 h-6 text-purple-600" />
                    Cover & Finalisasi
                  </>
                )}
              </CardTitle>
            </CardHeader>
            <CardContent className="p-8">
              {currentStep === 1 && (
                <BookFormBasic 
                  bookData={bookData}
                  updateBookData={updateBookData}
                />
              )}
              {currentStep === 2 && (
                <BookFormDetails 
                  bookData={bookData}
                  updateBookData={updateBookData}
                />
              )}
              {currentStep === 3 && (
                <BookFormCover 
                  bookData={bookData}
                  updateBookData={updateBookData}
                />
              )}

              <div className="flex justify-between items-center mt-8 pt-6 border-t border-gray-200">
                <Button
                  variant="outline"
                  onClick={prevStep}
                  disabled={currentStep === 1}
                  className="flex items-center gap-2"
                >
                  <ArrowLeft className="w-4 h-4" />
                  Sebelumnya
                </Button>

                <div className="flex gap-3">
                  {currentStep < 3 ? (
                    <Button
                      onClick={nextStep}
                      disabled={!isStepValid()}
                      className="bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 flex items-center gap-2"
                    >
                      Lanjutkan
                      <ArrowLeft className="w-4 h-4 transform rotate-180" />
                    </Button>
                  ) : (
                    <Button
                      onClick={handleSubmit}
                      disabled={isLoading}
                      className="bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700 flex items-center gap-2"
                    >
                      {isLoading ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white" />
                          Menyimpan...
                        </>
                      ) : (
                        <>
                          <Save className="w-4 h-4" />
                          Simpan Buku
                        </>
                      )}
                    </Button>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </div>
  );
}
